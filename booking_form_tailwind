import { useState, useEffect } from 'react'
import { createClient } from '@supabase/supabase-js'
import { loadStripe } from '@stripe/stripe-js'
import { format, addDays } from 'date-fns'

const supabase = createClient(
  import.meta.env.VITE_SUPABASE_URL,
  import.meta.env.VITE_SUPABASE_ANON_KEY
)

const stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY)

export default function BookingForm() {
  const [name, setName] = useState('')
  const [startDate, setStartDate] = useState('')
  const [endDate, setEndDate] = useState('')
  const [availableColors, setAvailableColors] = useState([])
  const [selectedColor, setSelectedColor] = useState('')
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    if (startDate) {
      const start = new Date(startDate)
      const end = addDays(start, 6)
      setEndDate(format(end, 'yyyy-MM-dd'))
      fetchAvailableColors(start, end)
    }
  }, [startDate])

  const fetchAvailableColors = async (start, end) => {
    const { data, error } = await supabase.rpc('get_available_colors', {
      _start_time: start.toISOString(),
      _end_time: end.toISOString()
    })
    if (error) console.error('Error fetching colors:', error)
    else setAvailableColors(data)
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    setLoading(true)

    const stripe = await stripePromise

    const response = await fetch('/api/create-checkout-session', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name,
        startDate,
        endDate,
        color: selectedColor
      })
    })

    const session = await response.json()
    await stripe.redirectToCheckout({ sessionId: session.id })
    setLoading(false)
  }

  return (
    <div className="max-w-xl mx-auto p-6 bg-white rounded-2xl shadow-xl mt-10">
      <h1 className="text-2xl font-bold text-gray-800 mb-6">Reserve Your Audio Guestbook</h1>
      <form onSubmit={handleSubmit} className="space-y-5">
        <div>
          <label className="block mb-1 text-gray-600">Name</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-black"
          />
        </div>

        <div>
          <label className="block mb-1 text-gray-600">Event Start Date</label>
          <input
            type="date"
            value={startDate}
            onChange={(e) => setStartDate(e.target.value)}
            required
            className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-black"
          />
        </div>

        {endDate && (
          <div>
            <p className="text-sm text-gray-500">Your rental window: <strong>{startDate}</strong> to <strong>{endDate}</strong></p>
          </div>
        )}

        {availableColors.length > 0 && (
          <div>
            <label className="block mb-2 text-gray-600">Choose Your Phone Color</label>
            <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
              {availableColors.map((color) => (
                <button
                  type="button"
                  key={color}
                  onClick={() => setSelectedColor(color)}
                  className={`rounded-lg px-4 py-2 text-sm font-medium border transition-all duration-200 ${selectedColor === color ? 'bg-black text-white border-black' : 'border-gray-300 text-gray-700 hover:border-black'}`}
                >
                  {color}
                </button>
              ))}
            </div>
          </div>
        )}

        <button
          type="submit"
          disabled={!selectedColor || loading}
          className="w-full bg-black text-white py-3 rounded-xl hover:bg-gray-800 transition-all"
        >
          {loading ? 'Redirecting...' : 'Continue to Payment'}
        </button>
      </form>
    </div>
  )
}
